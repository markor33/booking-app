version: '3.4'

services:
  web.bff:
    image: ${DOCKER_REGISTRY-}webbff
    build:
      context: .
      dockerfile: src/ApiGateway/Web.Bff/Dockerfile
    ports:
     - 10000:80

  identity.api:
    image: ${DOCKER_REGISTRY-}identityapi
    build:
      context: .
      dockerfile: src/Services/Identity/Identity.API/Dockerfile
    ports:
    - 11000:80
    - 11001:5000

  identity.db:
    image: postgres:alpine
    restart: always
    environment:
     POSTGRES_USERNAME: postgres
     POSTGRES_PASSWORD: 123456
    volumes:
     - identity-data:/var/lib/postgresql/data
    ports:
     - 21000:5432

  reservations.api:
    image: ${DOCKER_REGISTRY-}reservationsapi
    build:
      context: .
      dockerfile: src/Services/Reservations/Reservations.API/Dockerfile
    depends_on:
     - reservations.db
    ports:
     - 12000:80
     - 12001:5000

  accomodation.api:
    image: ${DOCKER_REGISTRY-}accomodationapi
    build:
      context: .
      dockerfile: src/Services/Accomodation/Dockerfile
    depends_on:
      - accomodation.db
    ports:
     - 9000:8080
  
  accomodation.db:
    image: mysql
    container_name: mysql
    restart: always
    ports:
     - 4000:3306
    environment:
     MYSQL_ROOT_PASSWORD: root
     MYSQL_DATABASE: db_accomodation
    volumes:
     - accomodation-data:/var/lib/mysql

  reservations.db:
    image: postgres:alpine
    restart: always
    environment:
     POSTGRES_USERNAME: postgres
     POSTGRES_PASSWORD: 123456
    volumes:
     - reservations-data:/var/lib/postgresql/data
    ports:
     - 22000:5432

  search.api:
    image: ${DOCKER_REGISTRY-}searchapi
    build:
      context: .
      dockerfile: src/Services/Search/Search.API/Dockerfile
    ports:
     - 14000:80
     - 14001:5000
  nats:
    image: 'nats:latest'
    expose:
        - "4222"
    ports:
        - "4222:4222"

  mongo:
    image: mongo:latest
    volumes:
      - mongo_data:/data/db
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    restart: always

  notifications.signalr:
    image: ${DOCKER_REGISTRY-}notificationssignalr
    build:
      context: .
      dockerfile: src/Services/Notifications/Notifications.SignalR/Dockerfile
    ports:
     - 20000:80

  ratings.api:
    image: ${DOCKER_REGISTRY-}ratingsapi
    build:
      context: .
      dockerfile: src/Services/Ratings.API/Dockerfile
    ports:
     - 15000:80
     - 15001:5000

  ratings.db:
    image: postgres:alpine
    restart: always
    environment:
     POSTGRES_USERNAME: postgres
     POSTGRES_PASSWORD: 123456
    volumes:
     - ratings-data:/var/lib/postgresql/data
    ports:
     - 23000:5432

  neo4j:
    image: neo4j
    restart: always
    ports:
      # bolt
      - "7687:7687"
      # http
      - "7474:7474"
      # https
      - "7473:7473"
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      # test: [ "CMD-SHELL", "echo RETURN 1 | cypher-shell -a <NEO4J_dbms_connector_bolt_listen__address> -u <user defined username> -p <user defined password> || exit 1" ]
      test:
        [
          "CMD-SHELL",
          "echo RETURN 1 | cypher-shell -a bolt://neo4j:7687 -u neo4j -p 12345678 || exit 1",
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      - NEO4J_AUTH=neo4j/12345678
    volumes:
      - neo4j_data:/data

  recommendationsystem.api:
    image: ${DOCKER_REGISTRY-}recommendationsystemapi
    build:
      context: .
      dockerfile: src/Services/AccommodationRecommendation/RecommendationSystem.API/Dockerfile
    ports:
     - 19000:80

volumes:
  identity-data:
  accomodation-data:
    name: mysql-database
  reservations-data:
  ratings-data:
  mongo_data:
  neo4j_data:


