// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ReservationsLibrary.Data;

#nullable disable

namespace Reservations.API.Migrations
{
    [DbContext(typeof(ReservationsDbContext))]
    [Migration("20230614152711_LogicalDelete")]
    partial class LogicalDelete
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ReservationsLibrary.Models.Accommodation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AutoConfirmation")
                        .HasColumnType("boolean");

                    b.Property<Guid>("HostId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Accommodations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb5678dc-5c5e-409f-8332-03161608c74c"),
                            AutoConfirmation = true,
                            HostId = new Guid("f2e8be61-1f0e-44c9-92b7-b97079cef005"),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("9681e718-1e6c-414a-b435-0fdeb5548ff3"),
                            AutoConfirmation = false,
                            HostId = new Guid("6fea589c-a74f-4a11-9ac0-6e228c33e520"),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("70bbb592-d7d7-4134-a117-f6b7968a125d"),
                            AutoConfirmation = false,
                            HostId = new Guid("d2c8c76a-ffab-4d4d-8dfa-035707b4e35c"),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("43b84d7a-02de-4a2f-bcdb-41f297ec1fb4"),
                            AutoConfirmation = true,
                            HostId = new Guid("eb1c614c-5367-49e4-b94a-f32c69bcd70d"),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("ReservationsLibrary.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccommodationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Canceled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("NumOfGuests")
                        .HasColumnType("integer");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccommodationId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("ReservationsLibrary.Models.ReservationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccommodationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("NumOfGuests")
                        .HasColumnType("integer");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccommodationId");

                    b.ToTable("ReservationRequests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8cd5cdec-f3ca-458b-bb29-e7cf2e8b6934"),
                            AccommodationId = new Guid("cb5678dc-5c5e-409f-8332-03161608c74c"),
                            GuestId = new Guid("01a1152d-84c5-47c6-8243-b4ba607bf9d1"),
                            IsDeleted = false,
                            NumOfGuests = 2,
                            Price = 500,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("95628d24-77d5-4f79-8e76-7dedbfd7c199"),
                            AccommodationId = new Guid("9681e718-1e6c-414a-b435-0fdeb5548ff3"),
                            GuestId = new Guid("d692de48-e23b-474d-9b06-4d4a4d561c6f"),
                            IsDeleted = false,
                            NumOfGuests = 1,
                            Price = 400,
                            Status = 0
                        });
                });

            modelBuilder.Entity("ReservationsLibrary.Models.Reservation", b =>
                {
                    b.HasOne("ReservationsLibrary.Models.Accommodation", "Accommodation")
                        .WithMany("Reservations")
                        .HasForeignKey("AccommodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ReservationsLibrary.Utils.DateRange", "Period", b1 =>
                        {
                            b1.Property<Guid>("ReservationId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("End")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("End");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("Start");

                            b1.HasKey("ReservationId");

                            b1.ToTable("Reservations");

                            b1.WithOwner()
                                .HasForeignKey("ReservationId");
                        });

                    b.Navigation("Accommodation");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("ReservationsLibrary.Models.ReservationRequest", b =>
                {
                    b.HasOne("ReservationsLibrary.Models.Accommodation", "Accommodation")
                        .WithMany("ReservationRequests")
                        .HasForeignKey("AccommodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ReservationsLibrary.Utils.DateRange", "Period", b1 =>
                        {
                            b1.Property<Guid>("ReservationRequestId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("End")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("End");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("Start");

                            b1.HasKey("ReservationRequestId");

                            b1.ToTable("ReservationRequests");

                            b1.WithOwner()
                                .HasForeignKey("ReservationRequestId");

                            b1.HasData(
                                new
                                {
                                    ReservationRequestId = new Guid("8cd5cdec-f3ca-458b-bb29-e7cf2e8b6934"),
                                    End = new DateTime(2023, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ReservationRequestId = new Guid("95628d24-77d5-4f79-8e76-7dedbfd7c199"),
                                    End = new DateTime(2023, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("Accommodation");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("ReservationsLibrary.Models.Accommodation", b =>
                {
                    b.Navigation("ReservationRequests");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
