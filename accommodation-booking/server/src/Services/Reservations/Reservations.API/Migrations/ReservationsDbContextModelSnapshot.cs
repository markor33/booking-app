// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ReservationsLibrary.Data;

#nullable disable

namespace Reservations.API.Migrations
{
    [DbContext(typeof(ReservationsDbContext))]
    partial class ReservationsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ReservationsLibrary.Models.Accommodation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AutoConfirmation")
                        .HasColumnType("boolean");

                    b.Property<Guid>("HostId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Accommodations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("21dbd1b8-b523-4d9b-a8c8-05e0c567316f"),
                            AutoConfirmation = true,
                            HostId = new Guid("142eac06-d30f-4836-80ad-fb52725149dd")
                        },
                        new
                        {
                            Id = new Guid("c609fafc-3c32-4e73-9cec-84877cf50eb1"),
                            AutoConfirmation = false,
                            HostId = new Guid("5d604ef4-7149-4cab-a1cf-4c6497e9768e")
                        },
                        new
                        {
                            Id = new Guid("b2702b82-40d6-498f-b9a7-fa6d5e0fa029"),
                            AutoConfirmation = false,
                            HostId = new Guid("a62dafca-14d6-4907-aa4a-cd8ca5607665")
                        },
                        new
                        {
                            Id = new Guid("f653f8e7-efde-45c2-b82e-16566de0c27a"),
                            AutoConfirmation = true,
                            HostId = new Guid("ee6f2fa4-8bcf-4530-b97a-686f9be133d2")
                        });
                });

            modelBuilder.Entity("ReservationsLibrary.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccommodationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Canceled")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("GuestId")
                        .HasColumnType("uuid");

                    b.Property<int>("NumOfGuests")
                        .HasColumnType("integer");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccommodationId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("ReservationsLibrary.Models.ReservationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccommodationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GuestId")
                        .HasColumnType("uuid");

                    b.Property<int>("NumOfGuests")
                        .HasColumnType("integer");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccommodationId");

                    b.ToTable("ReservationRequests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5ace11c7-4bbc-402c-9a42-0a85998fbec1"),
                            AccommodationId = new Guid("21dbd1b8-b523-4d9b-a8c8-05e0c567316f"),
                            GuestId = new Guid("5fbd1fd1-ab26-4728-aef2-e44fef2e41ab"),
                            NumOfGuests = 2,
                            Price = 500,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("d8ef57a7-f0c6-4111-90f7-2b85ebc6827b"),
                            AccommodationId = new Guid("c609fafc-3c32-4e73-9cec-84877cf50eb1"),
                            GuestId = new Guid("97a98ce3-7426-4f76-96cd-1e96472a9ece"),
                            NumOfGuests = 1,
                            Price = 400,
                            Status = 0
                        });
                });

            modelBuilder.Entity("ReservationsLibrary.Models.Reservation", b =>
                {
                    b.HasOne("ReservationsLibrary.Models.Accommodation", "Accommodation")
                        .WithMany()
                        .HasForeignKey("AccommodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ReservationsLibrary.Utils.DateRange", "Period", b1 =>
                        {
                            b1.Property<Guid>("ReservationId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("End")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("End");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("Start");

                            b1.HasKey("ReservationId");

                            b1.ToTable("Reservations");

                            b1.WithOwner()
                                .HasForeignKey("ReservationId");
                        });

                    b.Navigation("Accommodation");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("ReservationsLibrary.Models.ReservationRequest", b =>
                {
                    b.HasOne("ReservationsLibrary.Models.Accommodation", "Accommodation")
                        .WithMany()
                        .HasForeignKey("AccommodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ReservationsLibrary.Utils.DateRange", "Period", b1 =>
                        {
                            b1.Property<Guid>("ReservationRequestId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("End")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("End");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("Start");

                            b1.HasKey("ReservationRequestId");

                            b1.ToTable("ReservationRequests");

                            b1.WithOwner()
                                .HasForeignKey("ReservationRequestId");

                            b1.HasData(
                                new
                                {
                                    ReservationRequestId = new Guid("5ace11c7-4bbc-402c-9a42-0a85998fbec1"),
                                    End = new DateTime(2023, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ReservationRequestId = new Guid("d8ef57a7-f0c6-4111-90f7-2b85ebc6827b"),
                                    End = new DateTime(2023, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("Accommodation");

                    b.Navigation("Period");
                });
#pragma warning restore 612, 618
        }
    }
}
