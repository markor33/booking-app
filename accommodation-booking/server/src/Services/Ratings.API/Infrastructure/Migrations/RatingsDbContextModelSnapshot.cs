// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Ratings.API.Infrastructure.Persistence;

#nullable disable

namespace Ratings.API.Infrastructure.Migrations
{
    [DbContext(typeof(RatingsDbContext))]
    partial class RatingsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RatingsLibrary.Models.AccommodationRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccommodationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTimeOfGrade")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("AccommodationRatings");
                });

            modelBuilder.Entity("RatingsLibrary.Models.HostRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTimeOfGrade")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HostId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("HostRatings");
                });

            modelBuilder.Entity("RatingsLibrary.Models.ProminentHost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("HasFiveReservations")
                        .HasColumnType("boolean");

                    b.Property<Guid>("HostId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCancellationRateAcceptable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDurationOfReservationsAcceptable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGradeAcceptable")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("ProminentHosts");
                });

            modelBuilder.Entity("RatingsLibrary.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccommodationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Canceled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HostId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1008dd3-2342-41ab-9135-27fc94ce088e"),
                            AccommodationId = new Guid("0b20e8cc-088c-47d0-ae80-d1f88db19c87"),
                            Canceled = false,
                            GuestId = new Guid("6c0fdb9d-359e-43b6-bd68-cd11ff2289e7"),
                            HostId = new Guid("3e1ead7b-1412-47c9-94e6-c3928b47b474")
                        },
                        new
                        {
                            Id = new Guid("06f77f0d-f089-417a-b186-3af1b1116830"),
                            AccommodationId = new Guid("549180d0-2b6c-4bf8-9c88-51d0b9f8e6b4"),
                            Canceled = false,
                            GuestId = new Guid("f44ced9f-88e3-4c24-9c76-14dcd3ccb7b9"),
                            HostId = new Guid("8f172d06-3e60-4a6d-b0ca-2a59305fd10a")
                        });
                });

            modelBuilder.Entity("RatingsLibrary.Models.Reservation", b =>
                {
                    b.OwnsOne("Ratings.Utils.DateRange", "Period", b1 =>
                        {
                            b1.Property<Guid>("ReservationId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("End")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("End");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("Start");

                            b1.HasKey("ReservationId");

                            b1.ToTable("Reservations");

                            b1.WithOwner()
                                .HasForeignKey("ReservationId");

                            b1.HasData(
                                new
                                {
                                    ReservationId = new Guid("e1008dd3-2342-41ab-9135-27fc94ce088e"),
                                    End = new DateTime(2023, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ReservationId = new Guid("06f77f0d-f089-417a-b186-3af1b1116830"),
                                    End = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    Start = new DateTime(2023, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("Period")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
